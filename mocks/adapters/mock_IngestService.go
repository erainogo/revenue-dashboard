// Code generated by mockery v2.53.3. DO NOT EDIT.

package adapters

import (
	context "context"

	entities "github.com/erainogo/revenue-dashboard/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockIngestService is an autogenerated mock type for the IngestService type
type MockIngestService struct {
	mock.Mock
}

type MockIngestService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIngestService) EXPECT() *MockIngestService_Expecter {
	return &MockIngestService_Expecter{mock: &_m.Mock}
}

// IngestCountrySummery provides a mock function with given fields: ctx
func (_m *MockIngestService) IngestCountrySummery(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IngestCountrySummery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngestService_IngestCountrySummery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestCountrySummery'
type MockIngestService_IngestCountrySummery_Call struct {
	*mock.Call
}

// IngestCountrySummery is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIngestService_Expecter) IngestCountrySummery(ctx interface{}) *MockIngestService_IngestCountrySummery_Call {
	return &MockIngestService_IngestCountrySummery_Call{Call: _e.mock.On("IngestCountrySummery", ctx)}
}

func (_c *MockIngestService_IngestCountrySummery_Call) Run(run func(ctx context.Context)) *MockIngestService_IngestCountrySummery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIngestService_IngestCountrySummery_Call) Return(_a0 error) *MockIngestService_IngestCountrySummery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngestService_IngestCountrySummery_Call) RunAndReturn(run func(context.Context) error) *MockIngestService_IngestCountrySummery_Call {
	_c.Call.Return(run)
	return _c
}

// IngestMonthlySalesSummery provides a mock function with given fields: ctx
func (_m *MockIngestService) IngestMonthlySalesSummery(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IngestMonthlySalesSummery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngestService_IngestMonthlySalesSummery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestMonthlySalesSummery'
type MockIngestService_IngestMonthlySalesSummery_Call struct {
	*mock.Call
}

// IngestMonthlySalesSummery is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIngestService_Expecter) IngestMonthlySalesSummery(ctx interface{}) *MockIngestService_IngestMonthlySalesSummery_Call {
	return &MockIngestService_IngestMonthlySalesSummery_Call{Call: _e.mock.On("IngestMonthlySalesSummery", ctx)}
}

func (_c *MockIngestService_IngestMonthlySalesSummery_Call) Run(run func(ctx context.Context)) *MockIngestService_IngestMonthlySalesSummery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIngestService_IngestMonthlySalesSummery_Call) Return(_a0 error) *MockIngestService_IngestMonthlySalesSummery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngestService_IngestMonthlySalesSummery_Call) RunAndReturn(run func(context.Context) error) *MockIngestService_IngestMonthlySalesSummery_Call {
	_c.Call.Return(run)
	return _c
}

// IngestPurchaseSummery provides a mock function with given fields: ctx
func (_m *MockIngestService) IngestPurchaseSummery(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IngestPurchaseSummery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngestService_IngestPurchaseSummery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestPurchaseSummery'
type MockIngestService_IngestPurchaseSummery_Call struct {
	*mock.Call
}

// IngestPurchaseSummery is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIngestService_Expecter) IngestPurchaseSummery(ctx interface{}) *MockIngestService_IngestPurchaseSummery_Call {
	return &MockIngestService_IngestPurchaseSummery_Call{Call: _e.mock.On("IngestPurchaseSummery", ctx)}
}

func (_c *MockIngestService_IngestPurchaseSummery_Call) Run(run func(ctx context.Context)) *MockIngestService_IngestPurchaseSummery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIngestService_IngestPurchaseSummery_Call) Return(_a0 error) *MockIngestService_IngestPurchaseSummery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngestService_IngestPurchaseSummery_Call) RunAndReturn(run func(context.Context) error) *MockIngestService_IngestPurchaseSummery_Call {
	_c.Call.Return(run)
	return _c
}

// IngestRegionRevenueSummery provides a mock function with given fields: ctx
func (_m *MockIngestService) IngestRegionRevenueSummery(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IngestRegionRevenueSummery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngestService_IngestRegionRevenueSummery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestRegionRevenueSummery'
type MockIngestService_IngestRegionRevenueSummery_Call struct {
	*mock.Call
}

// IngestRegionRevenueSummery is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIngestService_Expecter) IngestRegionRevenueSummery(ctx interface{}) *MockIngestService_IngestRegionRevenueSummery_Call {
	return &MockIngestService_IngestRegionRevenueSummery_Call{Call: _e.mock.On("IngestRegionRevenueSummery", ctx)}
}

func (_c *MockIngestService_IngestRegionRevenueSummery_Call) Run(run func(ctx context.Context)) *MockIngestService_IngestRegionRevenueSummery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIngestService_IngestRegionRevenueSummery_Call) Return(_a0 error) *MockIngestService_IngestRegionRevenueSummery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngestService_IngestRegionRevenueSummery_Call) RunAndReturn(run func(context.Context) error) *MockIngestService_IngestRegionRevenueSummery_Call {
	_c.Call.Return(run)
	return _c
}

// IngestTransactionData provides a mock function with given fields: ctx, tc
func (_m *MockIngestService) IngestTransactionData(ctx context.Context, tc <-chan entities.Transaction) {
	_m.Called(ctx, tc)
}

// MockIngestService_IngestTransactionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestTransactionData'
type MockIngestService_IngestTransactionData_Call struct {
	*mock.Call
}

// IngestTransactionData is a helper method to define mock.On call
//   - ctx context.Context
//   - tc <-chan entities.Transaction
func (_e *MockIngestService_Expecter) IngestTransactionData(ctx interface{}, tc interface{}) *MockIngestService_IngestTransactionData_Call {
	return &MockIngestService_IngestTransactionData_Call{Call: _e.mock.On("IngestTransactionData", ctx, tc)}
}

func (_c *MockIngestService_IngestTransactionData_Call) Run(run func(ctx context.Context, tc <-chan entities.Transaction)) *MockIngestService_IngestTransactionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(<-chan entities.Transaction))
	})
	return _c
}

func (_c *MockIngestService_IngestTransactionData_Call) Return() *MockIngestService_IngestTransactionData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIngestService_IngestTransactionData_Call) RunAndReturn(run func(context.Context, <-chan entities.Transaction)) *MockIngestService_IngestTransactionData_Call {
	_c.Run(run)
	return _c
}

// NewMockIngestService creates a new instance of MockIngestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngestService {
	mock := &MockIngestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
