// Code generated by mockery v2.53.3. DO NOT EDIT.

package adapters

import (
	entities "github.com/erainogo/revenue-dashboard/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockAggregator is an autogenerated mock type for the Aggregator type
type MockAggregator struct {
	mock.Mock
}

type MockAggregator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregator) EXPECT() *MockAggregator_Expecter {
	return &MockAggregator_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: tx
func (_m *MockAggregator) Aggregate(tx entities.Transaction) {
	_m.Called(tx)
}

// MockAggregator_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockAggregator_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - tx entities.Transaction
func (_e *MockAggregator_Expecter) Aggregate(tx interface{}) *MockAggregator_Aggregate_Call {
	return &MockAggregator_Aggregate_Call{Call: _e.mock.On("Aggregate", tx)}
}

func (_c *MockAggregator_Aggregate_Call) Run(run func(tx entities.Transaction)) *MockAggregator_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Transaction))
	})
	return _c
}

func (_c *MockAggregator_Aggregate_Call) Return() *MockAggregator_Aggregate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregator_Aggregate_Call) RunAndReturn(run func(entities.Transaction)) *MockAggregator_Aggregate_Call {
	_c.Run(run)
	return _c
}

// GetOutput provides a mock function with no fields
func (_m *MockAggregator) GetOutput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockAggregator_GetOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutput'
type MockAggregator_GetOutput_Call struct {
	*mock.Call
}

// GetOutput is a helper method to define mock.On call
func (_e *MockAggregator_Expecter) GetOutput() *MockAggregator_GetOutput_Call {
	return &MockAggregator_GetOutput_Call{Call: _e.mock.On("GetOutput")}
}

func (_c *MockAggregator_GetOutput_Call) Run(run func()) *MockAggregator_GetOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregator_GetOutput_Call) Return(_a0 interface{}) *MockAggregator_GetOutput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregator_GetOutput_Call) RunAndReturn(run func() interface{}) *MockAggregator_GetOutput_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregator creates a new instance of MockAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregator {
	mock := &MockAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
